# -*- coding: utf-8 -*-
"""Step 3) create_a_graph.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dlxYIDS9VpU5QiZoaSOv2zwGGW68t8gE
"""

import scipy.stats as stats
import re
import plotly.express as px
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from google.colab import files
import os
from scipy.optimize import curve_fit
import seaborn as sns
sns.set()

#enter your folder name containing the xlsx files, the title of your graph
folder_path = 'Data'
mean_path1 = 'Mean1'
mean_path2 = 'Mean2'
mean_path3 = 'Mean3'

first_protein_pair = 'Flag2x and RIM'
second_protein_pair = 'Flag2x and Bassoon'
third_protein_pair =  'Bassoon and RIM'

def gaussian(x, amplitude, mean, stddev):
    return amplitude * np.exp(-((x - mean) / 4 / stddev) ** 2)

def get_file_names_in_folder(folder_path):

  file_names = []
  if os.path.exists(folder_path):
    for filename in os.listdir(folder_path):
      file_path = os.path.join(folder_path, filename)
      if os.path.isfile(file_path):
        file_names.append(filename)
  return file_names
file_list = get_file_names_in_folder(folder_path)

mean_list1 = get_file_names_in_folder(mean_path1)
mean_list2 = get_file_names_in_folder(mean_path2)
mean_list3 = get_file_names_in_folder(mean_path3)

def extract_last_number(range_str):
  match = re.findall(r"[-+]?\d*\.\d+|\d+", range_str)
  if match:
    return float(match[-1])
  else:
    return None

mean1_df = pd.read_excel(f'{mean_path1}/{mean_list1[0]}')
mean1 = mean1_df['Actual_Min_Distance_df1'].mean()
mean1 = int(mean1 * 1000)

mean2_df = pd.read_excel(f'{mean_path2}/{mean_list2[0]}')
mean2 = mean2_df['Actual_Min_Distance_df2'].mean()
mean2 = int(mean2 * 1000)

mean3_df = pd.read_excel(f'{mean_path3}/{mean_list3[0]}')
mean3 = mean3_df['Actual_Min_Distance_df3'].mean()
mean3 = int(mean3 * 1000)

new_file_list = [file_name.replace("_", " ") for file_name in file_list]
new_file_list

def get_first_two_words(new_file_list):
    first_two_words_list = []
    for file_name in new_file_list:
      words = file_name.split()
      first_two_words = " ".join(words[:2])
      first_two_words_list.append(first_two_words)
    return first_two_words_list

first_two_words = get_first_two_words(new_file_list)

protein_set_1 = first_two_words[0]
protein_set_2 = first_two_words[1]
protein_set_3 = first_two_words[2]

file1_df = pd.read_excel(f'{folder_path}/{file_list[0]}')
file2_df = pd.read_excel(f'{folder_path}/{file_list[1]}')
file3_df = pd.read_excel(f'{folder_path}/{file_list[2]}')

file1_df = file1_df.dropna()
file2_df = file2_df.dropna()
file3_df = file3_df.dropna()

file1_total = file1_df.iloc[:, -1]
file2_total = file2_df.iloc[:, -1]
file3_total = file3_df.iloc[:, -1]

file1_sum = file1_total.sum()
file2_sum = file2_total.sum()
file3_sum = file3_total.sum()

syanpses = file1_sum

file1_df['freq'] = (file1_total / file1_sum) * 100
file2_df['freq'] = (file2_total / file2_sum) * 100
file3_df['freq'] = (file3_total / file3_sum) * 100

file1_df['range'] = file1_df['range'].str.replace('(', '[')
file2_df['range'] = file2_df['range'].str.replace('(', '[')
file3_df['range'] = file3_df['range'].str.replace('(', '[')

file1_df['range'] = file1_df['range'].apply(extract_last_number)
file2_df['range'] = file2_df['range'].apply(extract_last_number)
file3_df['range'] = file3_df['range'].apply(extract_last_number)

file1_df['range'] = file1_df['range'] * 1000
file2_df['range'] = file2_df['range'] * 1000
file3_df['range'] = file3_df['range'] * 1000

plt.figure(figsize=(20, 12))
plt.gca().set_facecolor('white')
n, bins, patches = plt.hist(file1_df['range'].astype(str), weights=file1_df['freq'], label=protein_set_1, ec='white', alpha=0.7, bins=len(file1_df['range']))

xticks = bins[:-1] + (bins[1] - bins[0]) / 2

xticks_to_show = xticks[::2]
xticklabels_to_show = [str(file1_df['range'][int(i)]) for i in xticks_to_show]
plt.xticks(xticks_to_show, xticklabels_to_show, rotation=-90)

x_data = bins[:-1] + (bins[1] - bins[0]) / 2
y_data = n

popt, pcov = curve_fit(gaussian, x_data, y_data, p0=[max(y_data), np.mean(x_data), np.std(x_data)], maxfev=100000)
x_fit = np.linspace(min(x_data), max(x_data), 500)
y_fit = gaussian(x_fit, *popt)

plt.plot(x_fit, y_fit, 'b-', label='Gaussian Fit', linewidth =3)

plt.xlabel('Range (nm)', fontsize=16)
plt.ylabel('Percent of Protein Distribution', fontsize=16)

plt.text(0.95, 0.95, f"n = {syanpses} synapses",
         horizontalalignment='right', verticalalignment='top',
         transform=plt.gca().transAxes, fontsize=14, bbox=dict(facecolor='white', alpha=0.5))
plt.text(0.95, 0.90, f"mean = {mean1} nm",
         horizontalalignment='right', verticalalignment='top',
         transform=plt.gca().transAxes, fontsize=14, bbox=dict(facecolor='white', alpha=0.5))

ax = plt.gca()
ax.spines['bottom'].set_color('grey')
ax.spines['left'].set_color('grey')

plt.title(f'Synaptic Protein Distribution of {first_protein_pair}', fontsize=24)
plt.savefig(first_protein_pair + '.png')
files.download(first_protein_pair + '.png')

plt.figure(figsize=(20, 12))
plt.gca().set_facecolor('white')
n, bins, patches = plt.hist(file2_df['range'].astype(str), weights=file2_df['freq'], label=protein_set_2, ec='white', alpha=0.7, bins=len(file2_df['range']))

xticks = bins[:-1] + (bins[1] - bins[0]) / 2
xticks_to_show = xticks[::2]
xticklabels_to_show = [str(file2_df['range'][int(i)]) for i in xticks_to_show]
plt.xticks(xticks_to_show, xticklabels_to_show, rotation=-90)

x_data = bins[:-1] + (bins[1] - bins[0]) / 2
y_data = n

popt, pcov = curve_fit(gaussian, x_data, y_data, p0=[max(y_data), np.mean(x_data), np.std(x_data)], maxfev=100000)
x_fit = np.linspace(min(x_data), max(x_data), 500)
y_fit = gaussian(x_fit, *popt)

plt.plot(x_fit, y_fit, 'b-', label='Gaussian Fit', linewidth=3)
plt.xlabel('Range (nm)', fontsize=16)
plt.ylabel('Percent of Protein Distribution', fontsize=16)

plt.text(0.95, 0.95, f"n = {syanpses} synapses",
         horizontalalignment='right', verticalalignment='top',
         transform=plt.gca().transAxes, fontsize=14, bbox=dict(facecolor='white', alpha=0.5))
plt.text(0.95, 0.90, f"mean = {mean3} nm",
         horizontalalignment='right', verticalalignment='top',
         transform=plt.gca().transAxes, fontsize=14, bbox=dict(facecolor='white', alpha=0.5))
ax = plt.gca()
ax.spines['bottom'].set_color('grey')
ax.spines['left'].set_color('grey')

plt.title(f'Synaptic Protein Distribution of {second_protein_pair}', fontsize=24)
plt.savefig(second_protein_pair + '.png')
files.download(second_protein_pair + '.png')

plt.figure(figsize=(20, 12))
plt.gca().set_facecolor('white')
n, bins, patches = plt.hist(file3_df['range'].astype(str), weights=file3_df['freq'], label=protein_set_3, ec='white', alpha=0.7, bins=len(file3_df['range']))

xticks = bins[:-1] + (bins[1] - bins[0]) / 2

xticks_to_show = xticks[::2]
xticklabels_to_show = [str(file3_df['range'][int(i)]) for i in xticks_to_show]
plt.xticks(xticks_to_show, xticklabels_to_show, rotation=-90)

x_data = bins[:-1] + (bins[1] - bins[0]) / 2
y_data = n

popt, pcov = curve_fit(gaussian, x_data, y_data, p0=[max(y_data), np.mean(x_data), np.std(x_data)], maxfev=100000)
x_fit = np.linspace(min(x_data), max(x_data), 500)
y_fit = gaussian(x_fit, *popt)

plt.plot(x_fit, y_fit, 'b-', label='Gaussian Fit', linewidth=3)
plt.xlabel('Range (nm)', fontsize=16)
plt.ylabel('Percent of Protein Distribution', fontsize=16)
plt.text(0.95, 0.95, f"n = {syanpses} synapses",
         horizontalalignment='right', verticalalignment='top',
         transform=plt.gca().transAxes, fontsize=14, bbox=dict(facecolor='white', alpha=0.5))

plt.text(0.95, 0.90, f"mean = {mean2} nm",
         horizontalalignment='right', verticalalignment='top',
         transform=plt.gca().transAxes, fontsize=14, bbox=dict(facecolor='white', alpha=0.5))

ax = plt.gca()
ax.spines['bottom'].set_color('grey')
ax.spines['left'].set_color('grey')

plt.title(f'Synaptic Protein Distribution of {third_protein_pair}', fontsize=24)
plt.savefig(third_protein_pair)
files.download(third_protein_pair + '.png')

