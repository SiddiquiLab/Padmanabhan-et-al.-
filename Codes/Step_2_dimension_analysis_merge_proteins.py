# -*- coding: utf-8 -*-
"""Merge_protein_dimensions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H2ylCeTndy30qGoZeyUMuyZYEENLn7v8
"""

import pandas as pd
import numpy as np
import os
from google.colab import data_table, files
import matplotlib.pyplot as plt
import seaborn as sns

folder_path = 'Dimensions'
if not os.path.exists(folder_path):
    os.makedirs(folder_path)
else:
    print(f"Folder '{folder_path}' already exists.")

def get_file_names_in_folder(folder_path):
  file_names = []
  if os.path.exists(folder_path):
    for filename in os.listdir(folder_path):
      file_path = os.path.join(folder_path, filename)
      if os.path.isfile(file_path):
        file_names.append(filename)
  return file_names

#functon combines data from multiple excel files in the folder_path based on the protein name
def merge_excel_files_by_sheet(file_list, folder_path, protein_name):
    all_data = {}
    for filename in file_list:
        file_path = os.path.join(folder_path, filename)
        try:
            excel_file = pd.ExcelFile(file_path)
            for sheet_name in excel_file.sheet_names:
                df = excel_file.parse(sheet_name)
                if sheet_name in all_data:
                    all_data[sheet_name].append(df)
                else:
                    all_data[sheet_name] = [df]

        except FileNotFoundError:
            print(f"File not found: {file_path}")
        except Exception as e:
            print(f"Error processing {file_path}: {e}")

    if all_data:
        output_folder = 'Excel'
        if not os.path.exists(output_folder):
            os.makedirs(output_folder)

        output_filename = os.path.join(output_folder, f"{protein_name}_merged.xlsx")

        with pd.ExcelWriter(output_filename) as writer:
            for sheet_name, dataframes in all_data.items():
                merged_df = pd.concat(dataframes, ignore_index=True)
                merged_df.to_excel(writer, sheet_name=sheet_name, index=False)

        print(f"Successfully merged files into {output_filename}")
    else:
        print("No files were successfully merged.")

file_list = get_file_names_in_folder(folder_path)
length = len(file_list)

protein_name = file_list[0].split('_')[0]

merge_excel_files_by_sheet(file_list, folder_path, protein_name)

files.download(f'Excel/{protein_name}_merged.xlsx')

#graphs of merged protein with medians
merged_list = get_file_names_in_folder('Excel')
excel_file = pd.ExcelFile(f'Excel/{merged_list[0]}')

sheet_name = 'Length'
df_length = excel_file.parse(sheet_name)
df_length = excel_file.parse(sheet_name)
plt.figure(figsize=(8, 6))
sns.violinplot(x=df_length['True_Length'])
median_length = df_length['True_Length'].median()
plt.text(median_length * 2.0, -0.2, f'Median: {median_length:.4f} µm', color='midnightblue', fontsize=12)
plt.title(f'{protein_name} {sheet_name}')
plt.xlabel('Length µm')
plt.savefig(f'{protein_name}_Length.png')
plt.show()
files.download(f'{protein_name}_Length.png')

sheet_name = 'Volume'
df_volume = excel_file.parse(sheet_name)
plt.figure(figsize=(8, 6))
sns.violinplot(x=df_volume['Actual_Volume'])
median_volume = df_volume['Actual_Volume'].median()
plt.text(median_volume * 2.0, -0.2, f'Median: {median_volume:.4f} µm³', color='midnightblue', fontsize=12)
plt.title(f'{protein_name} {sheet_name}')
plt.xlabel('Volume µm³')
plt.savefig(f'{protein_name}_Volume.png')
plt.show()
files.download(f'{protein_name}_Volume.png')