# -*- coding: utf-8 -*-
"""Monte_Carlo_Enrichment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fba-kZoPff0EpVP4ZLUH9ADl7X2hq1vM
"""

import pandas as pd
import os
import numpy as np
from scipy.spatial import cKDTree
import matplotlib.pyplot as plt
from google.colab import files
import itertools
from pathlib import Path

id_name = 'G93R_s2h1_1'
folder_path = 'Data'
factor = 4.0404
individual_enrichments = {}
volume_min = np.array([0.0, 0.0, 0.0])
volume_max = np.array([2048 * 0.0415, 2048 * 0.0415, 26 * 0.16])

sheet_labels = []
percent_enrichments = []

out_dir = Path("excel_stats")
out_dir.mkdir(exist_ok=True)

def get_file_names_in_folder(folder_path):

  file_names = []
  if os.path.exists(folder_path):
    for filename in os.listdir(folder_path):
      file_path = os.path.join(folder_path, filename)
      if os.path.isfile(file_path):
        file_names.append(filename)
  return file_names

file_list = get_file_names_in_folder(folder_path)
length = len(file_list)

def add_pair(dictionary, key, value):
    if key in dictionary:
        dictionary[key].append(value)
    else:
        dictionary[key] = [value]

all_distances = []

for n in range(0,length):
  df = pd.read_csv(f'{folder_path}/{file_list[n]}')
  object1_name = []
  object2_name = []

  object1 = df['Object1'].unique()

  #Bassoon
  object1_1 = object1[0]
  #Flag2x
  object1_2 = object1[1]


  arr1_1 = object1_1.split(" ", 2);
  object1_1_name = arr1_1[0]
  object1_name.append(object1_1_name)

  arr1_2 = object1_2.split(" ", 2);
  object1_2_name = arr1_2[0]
  object1_name.append(object1_2_name)

  object2 = df['Object2'].unique()

  #Flag2x
  object2_1 = object2[0]
  #GluA2
  object2_2 = object2[1]

  arr2_1 = object2_1.split(" ", 2);
  object2_1_name = arr2_1[0]
  object2_name.append(object2_1_name)

  arr2_2 = object2_2.split(" ", 2);
  object2_2_name = arr2_2[0]
  object2_name.append(object2_2_name)

  df.insert(6, 'Expansion Factor', factor)
  actual_min_distance = df['MinDistance'] / df['Expansion Factor']
  df.insert(7, 'Actual_Min_Distance', actual_min_distance)




  df_list = []
  #Flag and GluA2 all
  df_1_all = df.loc[(df['Object1']==object1_1) & (df['Object2']==object2_2)]
  excel_real_Flag_GluA2_df = pd.DataFrame(df_1_all['Actual_Min_Distance'].dropna())
  df_list.append(df_1_all)
  #Flag and Bassoon all
  df_3_all = df.loc[(df['Object1']==object1_2) & (df['Object2']== object2_2)]
  excel_real_Flag_Bass_df = pd.DataFrame(df_3_all['Actual_Min_Distance'].dropna())
  df_list.append(df_3_all)

  object1_protein_name = []
  object2_protein_name = []


  protein_1_1_name = df_list[0]['Object1'].unique()[0]
  protein_1_2_name = df_list[1]['Object1'].unique()[0]
  protein_2_1_name = df_list[0]['Object2'].unique()[0]
  protein_2_2_name = df_list[1]['Object2'].unique()[0]

  protein_1_1_name = protein_1_1_name.split(" ", 1);
  protein_1_1_name = protein_1_1_name[0]
  object1_protein_name.append(protein_1_1_name)

  protein_1_2_name = protein_1_2_name.split(" ", 1);
  protein_1_2_name = protein_1_2_name[0]
  object1_protein_name.append(protein_1_2_name)

  protein_2_1_name = protein_2_1_name.split(" ", 1);
  protein_2_1_name = protein_2_1_name[0]
  object2_protein_name.append(protein_2_1_name)

  protein_2_2_name = protein_2_2_name.split(" ", 1);
  protein_2_2_name = protein_2_2_name[0]
  object2_protein_name.append(protein_2_2_name)

  excel_file_real_1 = out_dir / f"stats_real_{protein_1_1_name}_{protein_2_2_name}.xlsx"
  excel_file_real_2 = out_dir / f"stats_real_{protein_1_2_name}_{protein_2_2_name}.xlsx"

  with pd.ExcelWriter(excel_file_real_1, engine="openpyxl") as writer:
    excel_real_Flag_GluA2_df.to_excel(writer, sheet_name="real_means", index=False)
    files.download(excel_file_real_1)
  with pd.ExcelWriter(excel_file_real_2, engine="openpyxl") as writer:
    excel_real_Flag_Bass_df.to_excel(writer, sheet_name="real_means", index=False)
    files.download(excel_file_real_2)

  for pair_index, (df_pair, x, y) in enumerate(zip(df_list, object1_protein_name, object2_protein_name)):
    real_distances = df_pair['Actual_Min_Distance'].dropna().values
    num_points = len(real_distances)
    print(f"{x} - {y} has {num_points} real points for null generation")

    # Use unique seed per protein pair
    unique_seed = n * 10 + pair_index
    np.random.seed(unique_seed)

    # Generate null distribution with random A and B coords
    null_means = []
    for _ in range(1000):
        protein_A_coords = np.random.uniform(low=volume_min, high=volume_max, size=(num_points, 3))
        protein_B_coords = np.random.uniform(low=volume_min, high=volume_max, size=(num_points, 3))
        tree_B = cKDTree(protein_B_coords)
        rand_distances, _ = tree_B.query(protein_A_coords, k=1)
        null_means.append(np.mean(rand_distances))

    null_means = np.array(null_means)
    real_mean = np.mean(real_distances)
    null_mean = np.mean(null_means)
    rand_distances_df = pd.DataFrame({f"rand_distances {x}": rand_distances})
    all_distances.append(rand_distances_df[[f'rand_distances {x}']])
    percent_enrichment = ((null_mean - real_mean) / null_mean) * 100


    label = f"{x} - {y}"
    sheet_labels.append(label)
    percent_enrichments.append(percent_enrichment)
    add_pair(individual_enrichments, label, percent_enrichment)
    print(f"{label}: {percent_enrichment:.2f}% enrichment")

    #save excel
    excel_file = out_dir / f"stats_null_{x}_{y}.xlsx"
    null_df = pd.DataFrame({"null_mean": null_means})
    with pd.ExcelWriter(excel_file, engine="openpyxl") as writer:
        null_df.to_excel(writer, sheet_name="null_means", index=False)
        files.download(excel_file)


#bar chart
plt.figure(figsize=(10, 6))
bars = plt.bar(sheet_labels, percent_enrichments, color='skyblue')
plt.xticks(rotation=45, ha='right')
plt.ylabel('Percent Enrichment (%)')
plt.title('Enrichment per Sheet')
plt.ylim(0, max(percent_enrichments) * 1.2)

for bar in bars:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, height + 1, f'{height:.1f}%', ha='center', va='bottom')

plt.tight_layout()
plt.savefig("enrichment_per_sheet.png", dpi=300)
plt.show()

#save individual enrichments
df_individual_enrichments = pd.DataFrame(individual_enrichments)
df_individual_enrichments.to_csv('individual_enrichments.csv', index=False)
files.download('individual_enrichments.csv')

#save null distances
final_null_df = pd.concat(all_distances, ignore_index=True)
final_null_df.to_csv(f'{id_name}_null_distance.csv', index=False)
files.download(f'{id_name}_null_distance.csv')