# -*- coding: utf-8 -*-
"""Volume_length_width_calculations.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d9sUkfCXQoaAhjJAlqVEHbA2TZeNhszr

Takes input excel Imaris files from individual protein 'OrientatedObjectOO' and 'Volume'
"""

import pandas as pd
import numpy as np
from google.colab import data_table, files
import os
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()

length_path = "Length"
volume_path = 'Volume'
expansion_factors = 'Factor'
saved_dimensions  = 'Dimensions'

os.makedirs(length_path, exist_ok=True)
os.makedirs(volume_path, exist_ok=True)
os.makedirs(expansion_factors, exist_ok=True)
os.makedirs(saved_dimensions, exist_ok=True)

#function finds file names in folder
def get_file_names_in_folder(folder_path):
  file_names = []
  if os.path.exists(folder_path):
    for filename in os.listdir(folder_path):
      file_path = os.path.join(folder_path, filename)
      if os.path.isfile(file_path):
        file_names.append(filename)
  return file_names

#function finds expansion factor
def find_factor(dataframe):
  for index, row in dataframe.iterrows():
      matching_row = df_expansion[
          (df_expansion['Mouse Name'] == row['Mouse Name']) &
          (df_expansion['Slice'] == row['Slice']) &
          (df_expansion['Round'] == row['Round'])
    ]

      if not matching_row.empty:
          dataframe.loc[index, 'Expansion Factor'] = matching_row['Expansion Factor'].values[0]
  return dataframe

#data cleaning function
def data_cleaning(clean_data):
  clean_data['Original Image Name']  = clean_data['Original Image Name'].str.replace("_", " ").str.replace('3D','1').str.replace('2nd','2')
  clean_data['Original Image Name'] = clean_data['Original Image Name'].str.replace('G91L 1','G91L s5h2 1').str.replace('S5H2','s5h2')
  clean_data['Mouse Name'] = clean_data['Original Image Name'].str.split().str[0]
  clean_data['Slice'] = clean_data['Original Image Name'].str.split().str[1]
  clean_data['Round'] = clean_data['Original Image Name'].str.split().str[2]
  clean_data.drop(columns=['Original Image Name'], inplace=True)
  clean_data['Expansion Factor'] = np.nan
  clean_data = clean_data.astype({'Round': 'int', 'Expansion Factor' : 'float', 'Mouse Name' : 'object', 'Slice' : 'object'})
  return clean_data

#function get names from folder & dict (end step)
def get_names(folder_path, dict_name):
  for file_path in folder_path:
    first_word = file_path.split('_')[0]
    if first_word in dict_name:
      dict_name[first_word].append(file_path)
    else:
      dict_name[first_word] = [file_path]

#function sorts different proteins types from dict (end step)
def protein_sort(source_dict, target_dict):
  for protein_name, file_paths in source_dict.items():
    all_data = []
    for file_path in file_paths:
      df = pd.read_excel(file_path)
      all_data.append(df)
    target_dict[protein_name] = pd.concat(all_data, axis=0)

#drop Unamed:0 column (end step)
def drop_columns(df_dict):
  for df in df_dict.values():
    df.reset_index(drop=True, inplace=True)
    if 'Unnamed: 0' in df.columns:
      df.drop(columns=['Unnamed: 0'], inplace=True)

length_file_list = get_file_names_in_folder(length_path)
volume_file_list = get_file_names_in_folder(volume_path)
expansion_factors_list = get_file_names_in_folder(expansion_factors)

len_length = len(length_file_list)
len_volume = len(volume_file_list)

excel_file_paths_vol = []
excel_file_paths_width = []
excel_file_paths_len = []

for n in range(0,len_length):
  df_dim = pd.read_csv(f'{length_path}/{length_file_list[n]}', header=2)
  df_vol = pd.read_csv(f'{volume_path}/{volume_file_list[n]}', header=2)
  df_expansion = pd.read_csv(f'{expansion_factors}/{expansion_factors_list[0]}')

  #get protein name from file
  def protein_naming(list):
    protein_name = list[n].replace("_"," ")
    protein_name = protein_name.split()[0]
    protein_name = protein_name.replace(".","_")
    return protein_name

  protein_name_len = protein_naming(length_file_list)
  protein_name_vol = protein_naming(volume_file_list)
  protein_name_width = protein_naming(length_file_list)

  df_vol =  df_vol[['Volume', 'Original Image Name']]
  df_length =  df_dim[['BoundingBoxOO Length A', 'BoundingBoxOO Length B', 'BoundingBoxOO Length C', 'Original Image Name']]


  #clean data
  df_vol = data_cleaning(df_vol)
  df_length = data_cleaning(df_length)

  df_expansion = df_expansion.astype({'Round': 'int', 'Expansion Factor' : 'float', 'Mouse Name' : 'object', 'Slice' : 'object'})

  #loop through df_expansion and find expansion factor
  find_factor(df_vol)
  find_factor(df_length)

  #expansion factor conversion
  df_vol['Actual_Volume'] =  df_vol['Volume']/df_vol['Expansion Factor']
  df_length['Actual_Length_Y'] =  df_length['BoundingBoxOO Length A']/df_length['Expansion Factor']
  df_length['Actual_Length_X'] =  df_length['BoundingBoxOO Length B']/df_length['Expansion Factor']
  df_length['Actual_Length_Z'] =  df_length['BoundingBoxOO Length C']/df_length['Expansion Factor']

  df_length[['True_Length', 'True_Width', 'True_Thickness']] = pd.DataFrame(
    df_length[['Actual_Length_X', 'Actual_Length_Y', 'Actual_Length_Z']].apply(lambda row: sorted(row, reverse=True), axis=1).tolist(),
    index=df_length.index
  )
  df_length.drop(columns=['Actual_Length_X', 'Actual_Length_Y', 'Actual_Length_Z', 'BoundingBoxOO Length A', 'BoundingBoxOO Length B', 'BoundingBoxOO Length C',], inplace=True)

  with pd.ExcelWriter(f'{protein_name_vol}_{n}_volume.xlsx') as writer:
    df_vol.to_excel(writer, sheet_name=protein_name_vol)
  with pd.ExcelWriter(f'{protein_name_len}_{n}_length.xlsx') as writer:
    df_length.to_excel(writer, sheet_name=protein_name_len)

  excel_file_paths_vol.append(f'{protein_name_vol}_{n}_volume.xlsx')
  excel_file_paths_len.append(f'{protein_name_len}_{n}_length.xlsx')

#get names from folder and dict for length  and volume
excel_file_paths_vol_sep = {}
excel_file_paths_len_sep = {}
get_names(excel_file_paths_vol, excel_file_paths_vol_sep)
get_names(excel_file_paths_len, excel_file_paths_len_sep)

length_dfs = {}
volume_dfs = {}

#function sorts different proteins types from dict
protein_sort(excel_file_paths_len_sep, length_dfs)
protein_sort(excel_file_paths_vol_sep, volume_dfs)

#drop unnamed column
drop_columns(length_dfs)
drop_columns(volume_dfs)

#sorts in a list
length_dfskeys = sorted(list(length_dfs.keys()))
volume_dfskeys = sorted(list(volume_dfs.keys()))

#save the files
with pd.ExcelWriter(os.path.join(saved_dimensions, f'{length_dfskeys[0]}_dimensions.xlsx')) as writer:
    length_dfs[length_dfskeys[0]].to_excel(writer, sheet_name='Length', index=False)
    volume_dfs[volume_dfskeys[0]].to_excel(writer, sheet_name='Volume', index=False)
    files.download(os.path.join(saved_dimensions, f'{length_dfskeys[0]}_dimensions.xlsx'))
with pd.ExcelWriter(os.path.join(saved_dimensions, f'{length_dfskeys[1]}_dimensions.xlsx')) as writer:
    length_dfs[length_dfskeys[1]].to_excel(writer, sheet_name='Length', index=False)
    volume_dfs[volume_dfskeys[1]].to_excel(writer, sheet_name='Volume', index=False)
    files.download(os.path.join(saved_dimensions, f'{length_dfskeys[1]}_dimensions.xlsx'))
with pd.ExcelWriter(os.path.join(saved_dimensions, f'{length_dfskeys[2]}_dimensions.xlsx')) as writer:
    length_dfs[length_dfskeys[2]].to_excel(writer, sheet_name='Length', index=False)
    volume_dfs[volume_dfskeys[2]].to_excel(writer, sheet_name='Volume', index=False)
    files.download(os.path.join(saved_dimensions, f'{length_dfskeys[2]}_dimensions.xlsx'))

output_dir = "output_graphs"
os.makedirs(output_dir, exist_ok=True)

protein_to_graph = get_file_names_in_folder(saved_dimensions)

for file in protein_to_graph:
    file_path = os.path.join(saved_dimensions, file)
    xls = pd.ExcelFile(file_path)
    name = file.split('_')[0]
    for sheet_name in xls.sheet_names:
        df = pd.read_excel(xls, sheet_name=sheet_name)
        if sheet_name == "Length":
            # Median plot
            plt.figure(figsize=(10, 6))
            sns.violinplot(x='True_Length', data=df, inner='box')
            plt.xlabel('Length µm')
            plt.title(f'{sheet_name} for {name}')
            median_length = df['True_Length'].median()
            plt.axvline(median_length, color='midnightblue', linestyle='--', label='Median')
            plt.text(median_length * 2.0, -0.2, f'Median: {median_length:.4f} µm', color='midnightblue', fontsize=12)
            plt.legend()
            plt.savefig(f"{name}_{sheet_name}_median.png", dpi=300)
            plt.show()
            files.download(f"{name}_{sheet_name}_median.png")

        elif sheet_name == "Volume":
            # Median plot
            plt.figure(figsize=(10, 6))
            sns.violinplot(x='Actual_Volume', data=df, inner='box')
            plt.xlabel('Volume µm³')
            plt.title(f'{sheet_name} for {name}')
            median_volume = df['Actual_Volume'].median()
            plt.axvline(median_volume, color='midnightblue', linestyle='--', label='Median')
            plt.text(median_volume * 3.0, -0.2, f'Median: {median_volume:.4f} µm³', color='midnightblue', fontsize=12)
            plt.legend()
            plt.savefig(f"{name}_{sheet_name}_median.png", dpi=300)
            plt.show()
            files.download(f"{name}_{sheet_name}_median.png")

combined_volumes = []
combined_lengths = []

for i in range(len(excel_file_paths_vol)):
  df_v = pd.read_excel(excel_file_paths_vol[i])
  df_l = pd.read_excel(excel_file_paths_len[i])
  protein_name_len = excel_file_paths_len[i].split('_')[0]
  protein_name = excel_file_paths_vol[i].split('_')[0]

  df_v['Protein'] = protein_name
  df_l['Protein'] = protein_name_len

  combined_volumes.append(df_v[['Actual_Volume', 'Protein']])
  combined_lengths.append(df_l[['True_Length', 'Protein']])

combined_volumes_df = pd.concat(combined_volumes, ignore_index=True)
combined_lengths_df = pd.concat(combined_lengths, ignore_index=True)


plt.figure(figsize=(10, 8))
ax = sns.violinplot(x='Protein', y='Actual_Volume', data=combined_volumes_df, inner='box', linewidth=1.2, cut=0, width=0.8)
plt.title('Volume Distribution', fontsize=16)
plt.ylabel('Volume (µm³)')
plt.xlabel('Protein')
plt.ylim(bottom=-0.02, top=.4)

order = [tick.get_text() for tick in ax.get_xticklabels()]
medians = combined_volumes_df.groupby('Protein')['Actual_Volume'].median()
for i, protein in enumerate(order):
    median = medians[protein]
    ax.text(i + 0.07, .1, f'Median: {median:.4f} µm³', color='midnightblue', fontsize=8)
plt.tight_layout()
plt.subplots_adjust(right=0.9)
plt.savefig("all_proteins_volume_violin.png", dpi=300)
plt.show()
files.download("all_proteins_volume_violin.png")


# Length Plot
plt.figure(figsize=(12, 6))
ax = sns.violinplot(x='Protein', y='True_Length', data=combined_lengths_df)
plt.title('Length Distribution', fontsize=16)
plt.ylabel('Length (µm)')
plt.xlabel('Protein')
# plt.ylim(bottom=-0.02, top=1)

order = [tick.get_text() for tick in ax.get_xticklabels()]
medians = combined_lengths_df.groupby('Protein')['True_Length'].median()
for i, protein in enumerate(order):
    median = medians[protein]
    ax.text(i + 0.1, .35, f'Median: {median:.4f} µm', color='midnightblue', fontsize=8)
plt.tight_layout()
plt.savefig("all_proteins_length_violin.png", dpi=300)
plt.show()
files.download("all_proteins_length_violin.png")