# -*- coding: utf-8 -*-
"""Step 3) All_protein_graph.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13WnN0iK41itGqa0d8tUuPPkDE0YB1Tzf

Add merged_dimensions.excel file to Dimensions folder for each protein you want to be displayed in the graphs
"""

import pandas as pd
import numpy as np
import os
from google.colab import data_table, files
import matplotlib.pyplot as plt
import seaborn as sns

folder_path = 'Dimensions'
if not os.path.exists(folder_path):
    os.makedirs(folder_path)
else:
    print(f"Folder '{folder_path}' already exists.")

def get_file_names_in_folder(folder_path):

  file_names = []
  if os.path.exists(folder_path):
    for filename in os.listdir(folder_path):
      file_path = os.path.join(folder_path, filename)
      if os.path.isfile(file_path):
        file_names.append(filename)
  return file_names

file_list = get_file_names_in_folder(folder_path)
length = len(file_list)

#empty dfs
length_df = pd.DataFrame()
width_df = pd.DataFrame()
thickness_df = pd.DataFrame()
volume_df = pd.DataFrame()

#iterate through Excel files
for file_name in file_list:
    file_path = os.path.join(folder_path, file_name)

    #get name
    short_name = os.path.splitext(file_name)[0].split('_')[0]
    try:
        #Length
        temp_length_df = pd.read_excel(file_path, sheet_name='Length')
        length_series = temp_length_df['True_Length'].rename(f"{short_name}_Length")
        width_series = temp_length_df['True_Width'].rename(f"{short_name}_Width")
        thickness_series = temp_length_df['True_Thickness'].rename(f"{short_name}_Thickness")
        #Combine
        length_df = pd.concat([length_df, length_series], axis=1)
        width_df = pd.concat([width_df, width_series], axis=1)
        thickness_df = pd.concat([thickness_df, thickness_series], axis=1)

        #Volume
        temp_volume_df = pd.read_excel(file_path, sheet_name='Volume')
        volume_series = temp_volume_df['Actual_Volume'].rename(f"{short_name}_Volume")
        #Combine
        volume_df = pd.concat([volume_df, volume_series], axis=1)

    except FileNotFoundError:
        print(f"File {file_name} not found")
    except Exception as e:
        print(f"Error processing {file_name}: {e}")

#save all protein dimensions to excel
with pd.ExcelWriter('combined_dimensions.xlsx') as writer:
    length_df.to_excel(writer, sheet_name='True_Length', index=False)
    width_df.to_excel(writer, sheet_name='True_Width', index=False)
    thickness_df.to_excel(writer, sheet_name='True_Thickness', index=False)
    volume_df.to_excel(writer, sheet_name='Actual_Volume', index=False)

true_lengths = []
file_names = []

for file_name in file_list:
    file_path = os.path.join(folder_path, file_name)
    try:
        df = pd.read_excel(file_path, sheet_name='Length')
        true_length_column = df['True_Length']
        true_lengths.extend(true_length_column.tolist())
        file_names.extend([file_name] * len(true_length_column))

    except FileNotFoundError:
        print(f"File not found: {file_path}")
    except KeyError:
        print(f"'TrueLength' column not found in {file_name}")
    except Exception as e:
        print(f"An error occurred while processing {file_name}: {e}")

plot_df = pd.DataFrame({'Proteins': file_names, 'True Length': true_lengths})
plot_df['Proteins'] = plot_df['Proteins'].str.split('_').str[0]
protein_order = sorted(plot_df['Proteins'].unique())
medians = plot_df.groupby('Proteins')['True Length'].median().reindex(protein_order)

#violin graph for lengths
plt.figure(figsize=(12, 6))
sns.violinplot(data=plot_df, x='Proteins', y='True Length', inner='box', linewidth=1, order=protein_order)

for i, protein in enumerate(protein_order):
    median_val = medians[protein]
    plt.text(i + .3, .3,
             f'{median_val:.2f} µm',
             ha='center', va='bottom', fontsize=10, color='midnightblue', fontweight='bold')

plt.title('Protein Lengths with Median')
plt.xlabel('Proteins')
plt.ylabel('Length (µm)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig(f'All_protein_Length_Violin.png')
plt.show()

true_volume = []
file_names = []

for file_name in file_list:
    file_path = os.path.join(folder_path, file_name)
    try:
        df = pd.read_excel(file_path, sheet_name='Volume')
        true_volume_column = df['Actual_Volume']
        true_volume.extend(true_volume_column.tolist())
        file_names.extend([file_name] * len(true_volume_column))

    except FileNotFoundError:
        print(f"File not found: {file_path}")
    except KeyError:
        print(f"'TrueLength' column not found in {file_name}")
    except Exception as e:
        print(f"An error occurred while processing {file_name}: {e}")

plot_df = pd.DataFrame({'Proteins': file_names, 'Volume': true_volume})
plot_df['Proteins'] = plot_df['Proteins'].str.split('_').str[0]
protein_order = sorted(plot_df['Proteins'].unique())
medians = plot_df.groupby('Proteins')['Volume'].median().reindex(protein_order)


#violin graph
plt.figure(figsize=(12, 6))
sns.violinplot(data=plot_df, x='Proteins', y='Volume', inner='box', linewidth=1, order=protein_order)

for i, protein in enumerate(protein_order):
    median_val = medians[protein]
    plt.text(i + .2, .05,
             f'{median_val:.4f} µm',
             ha='center', va='bottom', fontsize=10, color='midnightblue', fontweight='bold')

plt.title('Protein Volumes with Median')
plt.xlabel('Proteins')
plt.ylabel('Volume (µm³)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig(f'All_protein_volume_Violin.png')
plt.show()